buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.yaml:snakeyaml:1.21'
        classpath 'org.owasp:dependency-check-gradle:5.3.2.1'
        classpath 'org.liquibase:liquibase-core:3.4.1'
        classpath "org.liquibase:liquibase-gradle-plugin:1.1.1"
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'liquibase'

group 'org.zalando'

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude group: "com.vaadin.external.google", module: "android-json"
}

dependencies {
    // Override spring-boot BOM versions
    ext['json.version'] = '20180130'
    ext['json-path'] = '2.4.0'
    ext['jsonassert'] = '1.5.0'

    implementation project(':core-common')
    implementation project(':core-metastore')
    implementation project(':core-services')

    implementation project(':api-publishing')
    implementation project(':api-consumption')
    implementation project(':api-metastore')
    implementation project(':api-cursors')
    implementation project(':api-misc')
    implementation project(':api-perftest')

    implementation "org.glassfish.jaxb:jaxb-runtime"

    implementation "org.apache.kafka:kafka-clients:$kafkaClientVersion"

    implementation "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    implementation 'org.springframework.boot:spring-boot-starter'

    implementation "org.springframework.boot:spring-boot-starter-security"

    // spring
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation "org.springframework:spring-core"
    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework.boot:spring-boot-starter-jetty"

    // oauth
    implementation('org.springframework.security.oauth:spring-security-oauth2:2.5.0.RELEASE') {
        exclude module: 'spring-webmvc'
        exclude module: 'spring-security-config'
        exclude module: 'spring-beans'
        exclude module: 'spring-core'
        exclude module: 'spring-context'
    }
    implementation('org.springframework.boot:spring-boot-starter-security') {
        exclude module: "logback-classic"
    }

    // actuator
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation('org.zalando.zmon:zmon-actuator:0.9.8') {
        exclude module: 'spring-webmvc'
        exclude module: 'spring-boot-autoconfigure'
    }

    // storage
    implementation("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude module: 'HikariCP'
    }
    implementation 'org.apache.tomcat:tomcat-jdbc'
    implementation 'org.postgresql:postgresql:42.3.2'

    //liquibase
    implementation('org.liquibase:liquibase-core')

    // misc
    implementation 'org.apache.httpcomponents:httpclient'
    implementation('org.zalando.stups:stups-spring-oauth2-server:1.0.24') {
        exclude module: "httpclient"
    }
    implementation 'org.zalando:jackson-datatype-problem:0.22.0'
    implementation 'org.zalando:problem:0.22.0'
    implementation 'org.zalando:problem-spring-web:0.23.0'
    implementation 'com.google.guava:guava:30.1-jre'
    implementation 'org.slf4j:slf4j-log4j12'
    implementation "io.dropwizard.metrics:metrics-core:$dropwizardVersion"
    implementation("com.ryantenney.metrics:metrics-spring:$dropwizardVersion") {
        exclude module: 'spring-core'
    }
    implementation "io.dropwizard.metrics:metrics-servlets:$dropwizardVersion"
    implementation "io.dropwizard.metrics:metrics-jvm:$dropwizardVersion"
    implementation 'io.prometheus:simpleclient_dropwizard:0.10.0'
    implementation 'io.prometheus:simpleclient_servlet:0.10.0'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.zalando:nakadi-plugin-api:3.2.1'
    implementation 'org.echocat.jomon:runtime:1.6.3'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.12.7'

    implementation("org.apache.curator:curator-recipes:$curatorVersion") {
        exclude module: "zookeeper"
    }
    implementation("org.apache.zookeeper:zookeeper:$zookeeperVersion"){
        exclude module: "log4j"
    }

    implementation('commons-beanutils:commons-beanutils:1.9.4')
    implementation('com.github.everit-org.json-schema:org.everit.json.schema:1.8.0') {
        exclude module: "json"
    }
    implementation "org.springframework.boot:spring-boot-starter-json"
    implementation 'org.json:json:20180130'

    // open tracing
    implementation "io.opentracing:opentracing-api:$opentracingVersion"
    implementation "io.opentracing:opentracing-util:$opentracingVersion"

    // tests
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.5.2') {
        exclude module: "hamcrest-core"
    }
    testImplementation "org.springframework:spring-test"
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation project(path: ':core-common', configuration: 'testOutput')
    testImplementation project(path: ':core-services', configuration: 'testOutput')
}
// end::dependencies[]

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    mainClassName = 'org.zalando.nakadi.Application'
}

task copyDatabaseSchemas() {

    copy {
        from "${rootProject.projectDir}/database/nakadi/10_data"
        into "${rootProject.projectDir}/app/src/main/resources/database/nakadi"
    }

}

build.dependsOn copyDatabaseSchemas
